// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    // Put your code here:
    // 514RAM(8*8*8*16=8192bits)を8つ並べたもの。(512*8 => 4096 = 4k);
    RAM512(in=in, load=i0, address=address[3..11], out=o0);
    RAM512(in=in, load=i1, address=address[3..11], out=o1);
    RAM512(in=in, load=i2, address=address[3..11], out=o2);
    RAM512(in=in, load=i3, address=address[3..11], out=o3);
    RAM512(in=in, load=i4, address=address[3..11], out=o4);
    RAM512(in=in, load=i5, address=address[3..11], out=o5);
    RAM512(in=in, load=i6, address=address[3..11], out=o6);
    RAM512(in=in, load=i7, address=address[3..11], out=o7);

    //アドレスにしたがった処理
    // addressの前半部の3bitの情報を利用し、情報を書き込む対象のRAM64を決める
    DMux8Way(in=load, sel=address[0..2], a=i0, b=i1, c=i2, d=i3, e=i4, f=i5, g=i6, h=i7);
    // addressの前半部の3bitの情報を利用し、情報を取得するするRAM64を決める。
    Mux8Way16(a=o0, b=o1, c=o2, d=o3, e=o4, f=o5, g=o6, h=o7, sel=address[0..2], out=out);

}
